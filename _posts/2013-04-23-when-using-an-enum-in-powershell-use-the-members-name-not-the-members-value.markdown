---
author: Kristof
comments: true
date: 2013-04-23 12:57:32+00:00
layout: post
slug: when-using-an-enum-in-powershell-use-the-members-name-not-the-members-value
title: When using an enum in PowerShell, use the member's name, not the member's value
categories:
- .NET
- C#
- Powershell
- Programming
---

Consider the following enum in C#:

```csharp
enum State
{
    Started,
    Stopped,
    Unknown
}
```

Note that I have not added an explicit value for the enum members. They will be generated by the compiler. As stated in the C# spec:


> ... its associated value is set implicitly, as follows:
* If the enum member is the first enum member declared in the enum type, its associated value is zero.
* Otherwise, the associated value of the enum member is obtained by increasing the associated value of the textually preceding enum member by one. This increased value must be within the range of values that can be represented by the underlying type, otherwise a compile-time error occurs.

Found atÂ [http://www.microsoft.com/en-us/download/details.aspx?id=7029](http://www.microsoft.com/en-us/download/details.aspx?id=7029), page 400-401 (I can't find the version for 4.5 though...).

Now what are the consequences of this? Consider the following piece of PowerShell:

```powershell
$result = $serviceController.GetServiceStatus()
if($result -eq 1)
{
    MyLib.StartService()
}
```

This will work, because PowerShell implicitly converts the int to the actual enum member.

However since we are assuming the value can go wrong. In the next version you add extra values, say for example to represent a starting/stopping service:

```csharp
enum State
{
    Starting,
    Started,
    Stopping,
    Stopped,
    Unknown
}
```

Since now all the values are shifted when you run your PowerShell again you start the service when it's already started ;) .

Solution?

First of all (as a consumer), use the enum's member name instead of its value:

```powershell
$result = $serviceController.GetServiceStatus()
if($result -eq [MyLib.State]::Stopped)
{
    MyLib.StartService()
}
```

This will ensure that you get the value for Started, not for anything else.

As a developer of a library you should ensure that you never mess up the order of an enum, by adding new values as last, or (prefered) set the value yourself:

```csharp
enum State
{
    Started = 0,
    Stopped = 1,
    Unknown = 2,
}
```

Becomes:

```csharp
enum State
{
    Starting = 3,
    Started = 0,
    Stopping = 4,
    Stopped = 1,
    Unknown = 2,
}
```

And now you can also perfectly reorder them so the numbers are sequential:

```csharp
enum State
{
    Started = 0,
    Stopped = 1,
    Unknown = 2,
    Starting = 3,
    Stopping = 4,
}
```
